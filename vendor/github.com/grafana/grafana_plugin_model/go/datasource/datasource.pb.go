// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datasource.proto

/*
Package datasource is a generated protocol buffer package.

It is generated from these files:
	datasource.proto

It has these top-level messages:
	DatasourceRequest
	Query
	TimeRange
	DatasourceResponse
	QueryResult
	Table
	TableColumn
	TableRow
	RowValue
	DatasourceInfo
	TimeSeries
	Point
*/
package datasource

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RowValue_Kind int32

const (
	// Field type null.
	RowValue_TYPE_NULL RowValue_Kind = 0
	// Field type double.
	RowValue_TYPE_DOUBLE RowValue_Kind = 1
	// Field type int64.
	RowValue_TYPE_INT64 RowValue_Kind = 2
	// Field type bool.
	RowValue_TYPE_BOOL RowValue_Kind = 3
	// Field type string.
	RowValue_TYPE_STRING RowValue_Kind = 4
	// Field type bytes.
	RowValue_TYPE_BYTES RowValue_Kind = 5
)

var RowValue_Kind_name = map[int32]string{
	0: "TYPE_NULL",
	1: "TYPE_DOUBLE",
	2: "TYPE_INT64",
	3: "TYPE_BOOL",
	4: "TYPE_STRING",
	5: "TYPE_BYTES",
}
var RowValue_Kind_value = map[string]int32{
	"TYPE_NULL":   0,
	"TYPE_DOUBLE": 1,
	"TYPE_INT64":  2,
	"TYPE_BOOL":   3,
	"TYPE_STRING": 4,
	"TYPE_BYTES":  5,
}

func (x RowValue_Kind) String() string {
	return proto.EnumName(RowValue_Kind_name, int32(x))
}
func (RowValue_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type DatasourceRequest struct {
	TimeRange  *TimeRange      `protobuf:"bytes,1,opt,name=timeRange" json:"timeRange,omitempty"`
	Datasource *DatasourceInfo `protobuf:"bytes,2,opt,name=datasource" json:"datasource,omitempty"`
	Queries    []*Query        `protobuf:"bytes,3,rep,name=queries" json:"queries,omitempty"`
}

func (m *DatasourceRequest) Reset()                    { *m = DatasourceRequest{} }
func (m *DatasourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DatasourceRequest) ProtoMessage()               {}
func (*DatasourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DatasourceRequest) GetTimeRange() *TimeRange {
	if m != nil {
		return m.TimeRange
	}
	return nil
}

func (m *DatasourceRequest) GetDatasource() *DatasourceInfo {
	if m != nil {
		return m.Datasource
	}
	return nil
}

func (m *DatasourceRequest) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

type Query struct {
	RefId         string `protobuf:"bytes,1,opt,name=refId" json:"refId,omitempty"`
	MaxDataPoints int64  `protobuf:"varint,2,opt,name=maxDataPoints" json:"maxDataPoints,omitempty"`
	IntervalMs    int64  `protobuf:"varint,3,opt,name=intervalMs" json:"intervalMs,omitempty"`
	ModelJson     string `protobuf:"bytes,4,opt,name=modelJson" json:"modelJson,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Query) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *Query) GetMaxDataPoints() int64 {
	if m != nil {
		return m.MaxDataPoints
	}
	return 0
}

func (m *Query) GetIntervalMs() int64 {
	if m != nil {
		return m.IntervalMs
	}
	return 0
}

func (m *Query) GetModelJson() string {
	if m != nil {
		return m.ModelJson
	}
	return ""
}

type TimeRange struct {
	FromRaw     string `protobuf:"bytes,1,opt,name=fromRaw" json:"fromRaw,omitempty"`
	ToRaw       string `protobuf:"bytes,2,opt,name=toRaw" json:"toRaw,omitempty"`
	FromEpochMs int64  `protobuf:"varint,3,opt,name=fromEpochMs" json:"fromEpochMs,omitempty"`
	ToEpochMs   int64  `protobuf:"varint,4,opt,name=toEpochMs" json:"toEpochMs,omitempty"`
}

func (m *TimeRange) Reset()                    { *m = TimeRange{} }
func (m *TimeRange) String() string            { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()               {}
func (*TimeRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeRange) GetFromRaw() string {
	if m != nil {
		return m.FromRaw
	}
	return ""
}

func (m *TimeRange) GetToRaw() string {
	if m != nil {
		return m.ToRaw
	}
	return ""
}

func (m *TimeRange) GetFromEpochMs() int64 {
	if m != nil {
		return m.FromEpochMs
	}
	return 0
}

func (m *TimeRange) GetToEpochMs() int64 {
	if m != nil {
		return m.ToEpochMs
	}
	return 0
}

type DatasourceResponse struct {
	Results []*QueryResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *DatasourceResponse) Reset()                    { *m = DatasourceResponse{} }
func (m *DatasourceResponse) String() string            { return proto.CompactTextString(m) }
func (*DatasourceResponse) ProtoMessage()               {}
func (*DatasourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DatasourceResponse) GetResults() []*QueryResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type QueryResult struct {
	Error    string        `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	RefId    string        `protobuf:"bytes,2,opt,name=refId" json:"refId,omitempty"`
	MetaJson string        `protobuf:"bytes,3,opt,name=metaJson" json:"metaJson,omitempty"`
	Series   []*TimeSeries `protobuf:"bytes,4,rep,name=series" json:"series,omitempty"`
	Tables   []*Table      `protobuf:"bytes,5,rep,name=tables" json:"tables,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueryResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueryResult) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *QueryResult) GetMetaJson() string {
	if m != nil {
		return m.MetaJson
	}
	return ""
}

func (m *QueryResult) GetSeries() []*TimeSeries {
	if m != nil {
		return m.Series
	}
	return nil
}

func (m *QueryResult) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

type Table struct {
	Columns []*TableColumn `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Rows    []*TableRow    `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Table) GetColumns() []*TableColumn {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *Table) GetRows() []*TableRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type TableColumn struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TableColumn) Reset()                    { *m = TableColumn{} }
func (m *TableColumn) String() string            { return proto.CompactTextString(m) }
func (*TableColumn) ProtoMessage()               {}
func (*TableColumn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TableColumn) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TableRow struct {
	Values []*RowValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *TableRow) Reset()                    { *m = TableRow{} }
func (m *TableRow) String() string            { return proto.CompactTextString(m) }
func (*TableRow) ProtoMessage()               {}
func (*TableRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TableRow) GetValues() []*RowValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type RowValue struct {
	Kind        RowValue_Kind `protobuf:"varint,1,opt,name=kind,enum=models.RowValue_Kind" json:"kind,omitempty"`
	DoubleValue float64       `protobuf:"fixed64,2,opt,name=doubleValue" json:"doubleValue,omitempty"`
	Int64Value  int64         `protobuf:"varint,3,opt,name=int64Value" json:"int64Value,omitempty"`
	BoolValue   bool          `protobuf:"varint,4,opt,name=boolValue" json:"boolValue,omitempty"`
	StringValue string        `protobuf:"bytes,5,opt,name=stringValue" json:"stringValue,omitempty"`
	BytesValue  []byte        `protobuf:"bytes,6,opt,name=bytesValue,proto3" json:"bytesValue,omitempty"`
}

func (m *RowValue) Reset()                    { *m = RowValue{} }
func (m *RowValue) String() string            { return proto.CompactTextString(m) }
func (*RowValue) ProtoMessage()               {}
func (*RowValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RowValue) GetKind() RowValue_Kind {
	if m != nil {
		return m.Kind
	}
	return RowValue_TYPE_NULL
}

func (m *RowValue) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *RowValue) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *RowValue) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *RowValue) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *RowValue) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

type DatasourceInfo struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OrgId          int64  `protobuf:"varint,2,opt,name=orgId" json:"orgId,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Type           string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Url            string `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	JsonData       string `protobuf:"bytes,6,opt,name=jsonData" json:"jsonData,omitempty"`
	SecureJsonData string `protobuf:"bytes,7,opt,name=secureJsonData" json:"secureJsonData,omitempty"`
}

func (m *DatasourceInfo) Reset()                    { *m = DatasourceInfo{} }
func (m *DatasourceInfo) String() string            { return proto.CompactTextString(m) }
func (*DatasourceInfo) ProtoMessage()               {}
func (*DatasourceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DatasourceInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DatasourceInfo) GetOrgId() int64 {
	if m != nil {
		return m.OrgId
	}
	return 0
}

func (m *DatasourceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatasourceInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DatasourceInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DatasourceInfo) GetJsonData() string {
	if m != nil {
		return m.JsonData
	}
	return ""
}

func (m *DatasourceInfo) GetSecureJsonData() string {
	if m != nil {
		return m.SecureJsonData
	}
	return ""
}

type TimeSeries struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags   map[string]string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Points []*Point          `protobuf:"bytes,3,rep,name=points" json:"points,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TimeSeries) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TimeSeries) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type Point struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Point) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*DatasourceRequest)(nil), "models.DatasourceRequest")
	proto.RegisterType((*Query)(nil), "models.Query")
	proto.RegisterType((*TimeRange)(nil), "models.TimeRange")
	proto.RegisterType((*DatasourceResponse)(nil), "models.DatasourceResponse")
	proto.RegisterType((*QueryResult)(nil), "models.QueryResult")
	proto.RegisterType((*Table)(nil), "models.Table")
	proto.RegisterType((*TableColumn)(nil), "models.TableColumn")
	proto.RegisterType((*TableRow)(nil), "models.TableRow")
	proto.RegisterType((*RowValue)(nil), "models.RowValue")
	proto.RegisterType((*DatasourceInfo)(nil), "models.DatasourceInfo")
	proto.RegisterType((*TimeSeries)(nil), "models.TimeSeries")
	proto.RegisterType((*Point)(nil), "models.Point")
	proto.RegisterEnum("models.RowValue_Kind", RowValue_Kind_name, RowValue_Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DatasourcePlugin service

type DatasourcePluginClient interface {
	Query(ctx context.Context, in *DatasourceRequest, opts ...grpc.CallOption) (*DatasourceResponse, error)
}

type datasourcePluginClient struct {
	cc *grpc.ClientConn
}

func NewDatasourcePluginClient(cc *grpc.ClientConn) DatasourcePluginClient {
	return &datasourcePluginClient{cc}
}

func (c *datasourcePluginClient) Query(ctx context.Context, in *DatasourceRequest, opts ...grpc.CallOption) (*DatasourceResponse, error) {
	out := new(DatasourceResponse)
	err := grpc.Invoke(ctx, "/models.DatasourcePlugin/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatasourcePlugin service

type DatasourcePluginServer interface {
	Query(context.Context, *DatasourceRequest) (*DatasourceResponse, error)
}

func RegisterDatasourcePluginServer(s *grpc.Server, srv DatasourcePluginServer) {
	s.RegisterService(&_DatasourcePlugin_serviceDesc, srv)
}

func _DatasourcePlugin_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasourcePluginServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.DatasourcePlugin/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasourcePluginServer).Query(ctx, req.(*DatasourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasourcePlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "models.DatasourcePlugin",
	HandlerType: (*DatasourcePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DatasourcePlugin_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datasource.proto",
}

func init() { proto.RegisterFile("datasource.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x5b, 0x6f, 0xf3, 0x44,
	0x10, 0xc5, 0x97, 0x5c, 0x3c, 0xf9, 0x1a, 0xdc, 0xe5, 0xa2, 0x10, 0x55, 0x28, 0x58, 0x05, 0x02,
	0x12, 0x01, 0x85, 0xaa, 0x20, 0x90, 0x78, 0x48, 0x1b, 0xa1, 0x94, 0xd0, 0x96, 0x6d, 0x8a, 0x54,
	0x84, 0x84, 0x9c, 0x64, 0x13, 0x4c, 0x6d, 0x6f, 0xba, 0xbb, 0x6e, 0x88, 0x78, 0xe2, 0xc7, 0x20,
	0xf1, 0x8c, 0x78, 0xe7, 0xaf, 0xa1, 0x1d, 0x5f, 0xd3, 0xf6, 0x6d, 0xe7, 0x9c, 0x33, 0x97, 0x9d,
	0x1d, 0x8f, 0xc1, 0x5d, 0xfa, 0xca, 0x97, 0x3c, 0x11, 0x0b, 0x36, 0xd8, 0x08, 0xae, 0x38, 0xa9,
	0x47, 0x7c, 0xc9, 0x42, 0xe9, 0xfd, 0x65, 0xc0, 0xe1, 0x79, 0x41, 0x52, 0xf6, 0x90, 0x30, 0xa9,
	0xc8, 0xa7, 0xe0, 0xa8, 0x20, 0x62, 0xd4, 0x8f, 0xd7, 0xac, 0x63, 0xf4, 0x8c, 0x7e, 0x6b, 0x78,
	0x38, 0x48, 0x3d, 0x06, 0xb3, 0x9c, 0xa0, 0xa5, 0x86, 0x9c, 0x02, 0x94, 0x29, 0x3a, 0x26, 0x7a,
	0xbc, 0x9d, 0x7b, 0x94, 0xf1, 0x27, 0xf1, 0x8a, 0xd3, 0x8a, 0x92, 0x7c, 0x08, 0x8d, 0x87, 0x84,
	0x89, 0x80, 0xc9, 0x8e, 0xd5, 0xb3, 0xfa, 0xad, 0xe1, 0x41, 0xee, 0xf4, 0x43, 0xc2, 0xc4, 0x8e,
	0xe6, 0xac, 0xf7, 0xa7, 0x01, 0x35, 0x84, 0xc8, 0x9b, 0x50, 0x13, 0x6c, 0x35, 0x59, 0x62, 0x5d,
	0x0e, 0x4d, 0x0d, 0x72, 0x0c, 0x07, 0x91, 0xff, 0xbb, 0xce, 0x74, 0xcd, 0x83, 0x58, 0x49, 0xac,
	0xc1, 0xa2, 0xfb, 0x20, 0x79, 0x17, 0x20, 0x88, 0x15, 0x13, 0x8f, 0x7e, 0xf8, 0xbd, 0xce, 0xa8,
	0x25, 0x15, 0x84, 0x1c, 0x81, 0x83, 0xe9, 0x2f, 0x24, 0x8f, 0x3b, 0x36, 0xc6, 0x2f, 0x01, 0xef,
	0x0f, 0x70, 0x8a, 0xcb, 0x93, 0x0e, 0x34, 0x56, 0x82, 0x47, 0xd4, 0xdf, 0x66, 0x85, 0xe4, 0xa6,
	0x2e, 0x50, 0x71, 0x8d, 0x9b, 0x69, 0x81, 0x68, 0x90, 0x1e, 0xb4, 0xb4, 0x60, 0xbc, 0xe1, 0x8b,
	0x5f, 0x8b, 0xdc, 0x55, 0x48, 0x27, 0x57, 0x3c, 0xe7, 0x6d, 0xe4, 0x4b, 0xc0, 0x3b, 0x03, 0x52,
	0x7d, 0x27, 0xb9, 0xe1, 0xb1, 0x64, 0xe4, 0x13, 0x68, 0x08, 0x26, 0x93, 0x50, 0xc9, 0x8e, 0x81,
	0xfd, 0x7b, 0x63, 0xbf, 0x7f, 0xc8, 0xd1, 0x5c, 0xe3, 0xfd, 0x6d, 0x40, 0xab, 0x42, 0xe8, 0x52,
	0x99, 0x10, 0x5c, 0xe4, 0xbd, 0x44, 0xa3, 0xec, 0xb0, 0x59, 0xed, 0x70, 0x17, 0x9a, 0x11, 0x53,
	0x3e, 0xb6, 0xc6, 0x42, 0xa2, 0xb0, 0xc9, 0xc7, 0x50, 0x97, 0xe9, 0x2b, 0xda, 0x58, 0x05, 0xa9,
	0x0e, 0xcb, 0x0d, 0x32, 0x34, 0x53, 0x90, 0xf7, 0xa1, 0xae, 0xfc, 0x79, 0xc8, 0x64, 0xa7, 0xb6,
	0xff, 0xe2, 0x33, 0x8d, 0xd2, 0x8c, 0xf4, 0x7e, 0x86, 0x1a, 0x02, 0xfa, 0x8a, 0x0b, 0x1e, 0x26,
	0x51, 0xfc, 0xec, 0x8a, 0xc8, 0x9f, 0x21, 0x47, 0x73, 0x0d, 0x39, 0x06, 0x5b, 0xf0, 0xad, 0x7e,
	0x7f, 0xad, 0x75, 0xf7, 0x83, 0xf3, 0x2d, 0x45, 0xd6, 0x7b, 0x0f, 0x5a, 0x15, 0x6f, 0x42, 0xc0,
	0x8e, 0xfd, 0x88, 0x65, 0x6d, 0xc0, 0xb3, 0x77, 0x02, 0xcd, 0xdc, 0x89, 0xf4, 0xa1, 0xfe, 0xe8,
	0x87, 0x09, 0xcb, 0x4b, 0x28, 0xc2, 0x52, 0xbe, 0xfd, 0x51, 0x13, 0x34, 0xe3, 0xbd, 0xff, 0x4c,
	0x68, 0xe6, 0x20, 0xf9, 0x08, 0xec, 0xfb, 0x20, 0x4e, 0x27, 0xb5, 0x3d, 0x7c, 0xeb, 0xa9, 0xd3,
	0xe0, 0xbb, 0x20, 0x5e, 0x52, 0x94, 0xe8, 0xf1, 0x58, 0xf2, 0x64, 0x1e, 0x32, 0x64, 0xb0, 0xf3,
	0x06, 0xad, 0x42, 0xd9, 0xec, 0x9e, 0x9e, 0xa4, 0x82, 0x72, 0x76, 0x33, 0x44, 0x8f, 0xcf, 0x9c,
	0xf3, 0x30, 0xa5, 0xf5, 0xf8, 0x34, 0x69, 0x09, 0xe8, 0xf8, 0x52, 0x89, 0x20, 0x5e, 0xa7, 0x7c,
	0x0d, 0x2f, 0x5a, 0x85, 0x74, 0xfc, 0xf9, 0x4e, 0x31, 0x99, 0x0a, 0xea, 0x3d, 0xa3, 0xff, 0x8a,
	0x56, 0x10, 0x6f, 0x05, 0xb6, 0xae, 0x97, 0x1c, 0x80, 0x33, 0xbb, 0xbb, 0x1e, 0xff, 0x72, 0x79,
	0x3b, 0x9d, 0xba, 0xaf, 0x91, 0xd7, 0xa1, 0x85, 0xe6, 0xf9, 0xd5, 0xed, 0x68, 0x3a, 0x76, 0x0d,
	0xd2, 0x06, 0x40, 0x60, 0x72, 0x39, 0x3b, 0x3d, 0x71, 0xcd, 0x42, 0x3f, 0xba, 0xba, 0x9a, 0xba,
	0x56, 0xa1, 0xbf, 0x99, 0xd1, 0xc9, 0xe5, 0xb7, 0xae, 0x5d, 0xe8, 0x47, 0x77, 0xb3, 0xf1, 0x8d,
	0x5b, 0xf3, 0xfe, 0x35, 0xa0, 0xbd, 0xbf, 0x31, 0x48, 0x1b, 0xcc, 0x20, 0xed, 0xa2, 0x45, 0xcd,
	0x60, 0xa9, 0x07, 0x94, 0x8b, 0x75, 0x36, 0xa0, 0x16, 0x4d, 0x8d, 0xe2, 0x11, 0xad, 0xf2, 0x11,
	0x35, 0xa6, 0x76, 0x1b, 0x96, 0x7d, 0xcb, 0x78, 0x26, 0x2e, 0x58, 0x89, 0x08, 0xb3, 0x16, 0xe8,
	0xa3, 0x1e, 0xed, 0xdf, 0x24, 0x8f, 0x75, 0x56, 0xbc, 0xb8, 0x43, 0x0b, 0x9b, 0x7c, 0x00, 0x6d,
	0xc9, 0x16, 0x89, 0x60, 0x17, 0xb9, 0xa2, 0x81, 0x8a, 0x27, 0xa8, 0xf7, 0x8f, 0x01, 0x50, 0x4e,
	0xfb, 0x4b, 0x13, 0x45, 0x3e, 0x03, 0x5b, 0xf9, 0xeb, 0x7c, 0x34, 0x8f, 0x9e, 0x7f, 0x23, 0x83,
	0x99, 0xbf, 0x96, 0xe3, 0x58, 0x89, 0x1d, 0x45, 0xa5, 0xfe, 0x56, 0x36, 0xe9, 0x3a, 0x7b, 0xb2,
	0x1d, 0x71, 0x9f, 0xd1, 0x8c, 0xec, 0x7e, 0x01, 0x4e, 0xe1, 0xa9, 0xaf, 0x77, 0xcf, 0x76, 0x59,
	0x62, 0x7d, 0xd4, 0xed, 0x7a, 0x2c, 0xa6, 0xca, 0xa1, 0xa9, 0xf1, 0x95, 0xf9, 0xa5, 0xe1, 0x7d,
	0x0d, 0x35, 0x8c, 0x84, 0xbb, 0x27, 0x88, 0x98, 0x54, 0x7e, 0xb4, 0xc9, 0x1a, 0x5d, 0x02, 0xfb,
	0x01, 0x8c, 0x2c, 0xc0, 0x90, 0x82, 0x5b, 0xbe, 0xd3, 0x75, 0x98, 0xac, 0x83, 0x98, 0x7c, 0x93,
	0x6f, 0xe9, 0x77, 0x9e, 0x2f, 0xff, 0xec, 0xe7, 0xd2, 0xed, 0xbe, 0x44, 0xa5, 0xfb, 0x6c, 0xf4,
	0xea, 0xa7, 0xca, 0xdf, 0x61, 0x5e, 0xc7, 0x7f, 0xd5, 0xe7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x66, 0x11, 0x2d, 0x5a, 0xbf, 0x06, 0x00, 0x00,
}
